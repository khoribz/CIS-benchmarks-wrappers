Запуск процесса сканирования манифестов Kubernetes с помощью Trivy...
Сканирование манифеста app/backend-deployment.yaml с помощью Trivy...

backend-deployment.yaml (kubernetes)
====================================
Tests: 155 (SUCCESSES: 140, FAILURES: 15, EXCEPTIONS: 0)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

MEDIUM: Container 'backend' of Deployment 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'backend' of Deployment 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'backend' of Deployment 'backend' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'backend' of Deployment 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: container "backend" of deployment "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 backend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: backend
  17 │         image: kelseyhightower/helloworld:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


Найдены критические или высокие уязвимости в манифесте app/backend-deployment.yaml:
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Сканирование манифеста app/db-deployment.yaml с помощью Trivy...

db-deployment.yaml (kubernetes)
===============================
Tests: 154 (SUCCESSES: 140, FAILURES: 14, EXCEPTIONS: 0)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

MEDIUM: Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'db' of Deployment 'db' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: container "db" of deployment "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 db-deployment.yaml:16-26
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: postgres:latest
  18 │         ports:
  19 │         - containerPort: 5432
  20 │         env:
  21 │         - name: POSTGRES_DB
  22 │           value: mydatabase
  23 │         - name: POSTGRES_USER
  24 └           value: myuser
  ..   
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


Найдены критические или высокие уязвимости в манифесте app/db-deployment.yaml:
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)
HIGH: Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
Сканирование манифеста app/frontend-deployment.yaml с помощью Trivy...

frontend-deployment.yaml (kubernetes)
=====================================
Tests: 155 (SUCCESSES: 140, FAILURES: 15, EXCEPTIONS: 0)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

MEDIUM: Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'frontend' of Deployment 'frontend' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: container "frontend" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 frontend-deployment.yaml:16-19
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  16 ┌       - name: frontend
  17 │         image: nginx:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: deployment frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


Найдены критические или высокие уязвимости в манифесте app/frontend-deployment.yaml:
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)
HIGH: Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'backend' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment backend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)
HIGH: Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 2, CRITICAL: 0)
HIGH: Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
HIGH: deployment frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
Сканирование завершено. Вы можете продолжить развертывание.
